- name: get list of vms
  virt: command=list_vms
  register: virt_vms
- name: create kickstart files
  template: src=../../common/templates/kickstart.cfg.j2 dest={{ kickstart_path }}/{{ item.name }}.cfg  mode=0644
  when: item.name not in virt_vms.list_vms
  with_items: vms
- name: create vms
  command: "virt-install --name {{ item.name }}
                         --ram {{ item.mem }}
                         --vcpus {{ item.vcpu }}
                         --location {{ disk_img_path }}/{{ rhel_iso_img }}
                         --os-type linux
                         --os-variant rhel7
                         {% for nic in item.nic %}
                         --network network={{ nic.network.name }}
                         {% endfor %}
                         --hvm
                         --virt-type kvm
                         --disk size={{ item.disk.size }},path={{ disk_img_path }}/{{ item.disk.path }},format={{ item.disk.format }},bus=scsi
                         --nographics
                         --noautoconsole
                         --wait 10
                         --extra-args='ks=nfs:{{ network_admin.gw_ip }}:{{ kickstart_path }}/{{ item.name }}.cfg ip=dhcp console=tty0 console=ttyS0,115200n8'"
  when: item.name not in virt_vms.list_vms
  with_items: vms
 #TODO: Check why virtio does not work, i.e. does not provide device /dev/sda
 #TODO: Check why async creation of the VMs does not work (error message: "The async task did not return valid JSON: No JSON object could be decoded")
#  async: 7200
#  poll: 0
#  register: kvm_images

#- name: Wait for image creation to complete
#  async_status: jid={{ item.ansible_job_id }}
#  register: virt_install_jobs
#  until: virt_install_jobs.finished
#  retries: 300
#  with_items: kvm_images.results

- name: wait for VMs finishing rebooting
  wait_for: host={{ item.ansible_host }} port=22 delay=0 timeout=300
  with_items: ose3_vms
