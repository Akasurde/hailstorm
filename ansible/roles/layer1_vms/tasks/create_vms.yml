- name: get list of vms
  virt: command=list_vms
  register: virt_vms
- name: create kickstart files
  template: src=kickstart.cfg.j2 dest={{ kickstart_path }}/{{ hostvars[item].name }}.cfg  mode=0644
  when: "{{ hostvars[item].name not in virt_vms.list_vms and (hostvars[item].skip_install is not defined or hostvars[item].skip_install != true) }}"
  with_items: "{{ groups[group] }}"
- name: create vms
  command: "{{ lookup('template','virt-install-command.j2') }}"
  when: "{{ hostvars[item].name not in virt_vms.list_vms and (hostvars[item].skip_install is not defined or hostvars[item].skip_install != true) }}"
  with_items: "{{ groups[group] }}"
#TODO: Check why async creation of the VMs does not work (error message: "The async task did not return valid JSON: No JSON object could be decoded")
#  async: 7200
#  poll: 0
#  register: kvm_images

#- name: Wait for image creation to complete
#  async_status: jid={{ item.ansible_job_id }}
#  register: virt_install_jobs
#  until: virt_install_jobs.finished
#  retries: 300
#  with_items: kvm_images.results

- name: ensure that VMs are running
  virt: name="{{ hostvars[item].name }}" state=running uri=qemu:///system
  when: "{{ hostvars[item].skip_install is not defined or hostvars[item].skip_install != true }}"
  with_items: "{{ groups[group] }}"
- name: wait for VMs finishing (re)booting
  wait_for: host={{ hostvars[item].ansible_host }} port=22 delay=0 timeout=300
  when: "{{ hostvars[item].skip_install is not defined or hostvars[item].skip_install != true }}"
  with_items: "{{ groups[group] }}"

#- name: determine VM ssh host key
#  command: ssh-keyscan -t rsa {{ hostvars[item].ansible_host }}
#  register: host_key
#  when: "{{ hostvars[item].name not in virt_vms.list_vms and (hostvars[item].skip_install is not defined or hostvars[item].skip_install != true) }}"
#  with_items: groups[group]
#- debug: msg="{{ item.stdout | regex_replace('(^\\S+)\\s+(ssh\\S+\\s\\S+).*$', '\\1') }}"
#  when: item.stdout is defined
#  with_items: host_key.results
#- debug: msg="{{ item.stdout | regex_replace('(^\\S+)\\s*(ssh\\S+\\s\\S+).*$', '\\2') }}"
#  when: item.stdout is defined
#  with_items: host_key.results
#- name: add ssh host to from local known_hosts
#  local_action: known_hosts state=present name="{{ item.stdout | regex_replace('(^\\S+)\\s+(ssh\\S+\\s\\S+).*$', '\\1') }}" key="{{ item.stdout | regex_replace('(^\\S+)\\s*(ssh\\S+\\s\\S+).*$', '\\2') }}"
#  when: item.stdout is defined
#  with_items: host_key.results


# ALTERNATIVE APPROACH FOR VMs NOT TO BE INSTALLED

#- name: create VM disk image
#  command: qemu-img create -f qcow2 {{ disk_img_path }}/{{ hostvars[item].disk.path }} {{ hostvars[item].disk.size }}G
#  when: "{{ hostvars[item].name not in virt_vms.list_vms and hostvars[item].skip_install is defined and hostvars[item].skip_install == true }}"
#  with_items: groups[group]
#- name: create volume description
#  template: src=volume.xml.j2 dest=/tmp/{{ hostvars[item].disk.path }}.xml  mode=0644
#  when: "{{ hostvars[item].name not in virt_vms.list_vms and hostvars[item].skip_install is defined and hostvars[item].skip_install == true }}"
#  with_items: groups[group]
#- name: create volume
#  command: virsh vol-create {{ storage_default.name }} /tmp/{{ hostvars[item].disk.path }}.xml --prealloc-metadata
#  when: "{{ hostvars[item].name not in virt_vms.list_vms and hostvars[item].skip_install is defined and hostvars[item].skip_install == true }}"
#  with_items: groups[group]
#- name: create VM
#  virt: command=define name={{ hostvars[item].name }} uri=qemu:///system xml={{ lookup('template','domain.xml.j2') }}
#  when: "{{ hostvars[item].name not in virt_vms.list_vms and hostvars[item].skip_install is defined and hostvars[item].skip_install == true }}"
#  with_items: groups[group]
- name: create VM template
  command: "{{ lookup('template','virt-install-command.j2') }}"
  register: domain_xml
  when: "{{ hostvars[item].name not in virt_vms.list_vms and hostvars[item].skip_install is defined and hostvars[item].skip_install == true }}"
  with_items: "{{ groups[group] }}"
- name: create VM without installation
  virt: command=define name={{ hostvars[item.item].name }} uri=qemu:///system xml={{ item.stdout }}
  when: item.stdout is defined
  with_items: "{{ domain_xml.results }}"
