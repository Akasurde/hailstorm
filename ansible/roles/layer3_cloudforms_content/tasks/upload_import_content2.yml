- name: check if type is present
  local_action: stat path={{content_location}}/{{ item.type }}
  register: stat_item
- block:
    - debug: msg="importing {{ item.type }}"
    - name: create tmp directory
      file: name=/tmp/miq_import state=directory
    - name: upload contents to CF
      copy: src={{content_location}}/{{ item.type }} dest=/tmp/miq_import
    - name: import contents
      shell: /usr/bin/miqimport {{ item.type }} /tmp/miq_import/{{ item.type }}
      when: item.import_individual_files is not defined or not item.import_individual_files

    - name: find individual content files
      find: paths=/tmp/miq_import/{{ item.type }}
      register: content_files
      when: item.import_individual_files is defined and item.import_individual_files

    # - debug: var=content_files

    - name: rename individual files / remove spaces
      shell: mv "{{ item }}" "{{ item|regex_replace('\s','_') }}"
      when: not content_files|skipped and item|search('\s')
      with_items: "{% if content_files.files is defined %}{{ content_files.files|map(attribute='path')|list }}{% else %}[]{% endif %}"

    - name: import contents (individual files)
      shell: /usr/bin/miqimport {{ item.0 }} "{{ item.1|regex_replace('\s','_') }}"
      with_nested:
        -
          - "{{ item.type }}"
        -  "{% if content_files.files is defined %}{{ content_files.files|map(attribute='path')|list }}{% else %}[]{% endif %}"
      when: not content_files|skipped

    # - name: remove temp directory on cfme
    #   file: name=/tmp/miq_import state=absent
  when: stat_item.stat.exists
