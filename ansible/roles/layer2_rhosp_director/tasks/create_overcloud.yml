#import node configs
- name: create instackenv.json
  template: src=instackenv.json.j2 dest=~/instackenv.json mode=0644
  become: yes
  become_user: "{{ rhosp_stack_user }}"
  register: instackenv_json
- block:
    - name: import baremetal nodes to ironic
      shell: . ~/stackrc && openstack baremetal import --json ~/instackenv.json
    - name: configure boot
      shell: . ~/stackrc && openstack baremetal configure boot
    - name: delete ironic flavors
      shell: . ~/stackrc && openstack flavor delete {{ item }}
      ignore_errors: True
      with_items:
        - compute
        - control
        - baremetal
    - name: configure ironic flavor for baremetal (dummy)
      shell: . ~/stackrc && openstack flavor create --id auto --ram 4096 --disk 58 --vcpus 4 baremetal
    - name: configure ironic flavors
      shell: >
        . ~/stackrc && openstack flavor create --id auto
        --ram {{ hostvars[groups['rhosp-' + item][0]].mem }}
        --disk {{ hostvars[groups['rhosp-' + item][0]].disk.size - 2 }}
        --vcpus {{ hostvars[groups['rhosp-' + item][0]].vcpu }}
        {{ item }}
      with_items:
        - compute
        - control
    - name: adapt ironic flavors (and match flavor to node profile)
      shell: >
        . ~/stackrc && openstack flavor set
        --property "cpu_arch"="x86_64"
        --property "capabilities:boot_option"="local"
        --property "capabilities:profile"="{{ item }}"
        {{ item }}
      with_items:
        - compute
        - control
        - baremetal
    - name: discover nodes (more coffee)
      shell: . ~/stackrc &&  openstack baremetal introspection bulk start
    - name: update control nodes with flavor
      shell: >
        . ~/stackrc && ironic node-update \
        $(ironic port-show --address {{ hostvars[item].nic[0].mac }} |  awk '/node_uuid/{ print $4 }') \
        add properties/capabilities='profile:control,boot_option:local'
      with_items: "{{ groups['rhosp-control'] }}"
    - name: update compute nodes with flavor
      shell: >
        . ~/stackrc && ironic node-update \
        $(ironic port-show --address {{ hostvars[item].nic[0].mac }} |  awk '/node_uuid/{ print $4 }') \
        add properties/capabilities='profile:compute,boot_option:local'
      with_items: "{{ groups['rhosp-compute'] }}"
    - name: Create my_templates directory
      file: path=~/my_templates state=directory
    - name: Create nic-configs directory
      file: path=~/my_templates/nic-configs state=directory
    - name: copy tripleO templates
      shell: cp -rf /usr/share/openstack-tripleo-heat-templates/* ~/my_templates/
    #- name: create custom install configuration
    #  shell: >
    #    cat ~/my_templates/environments/network-isolation.yaml |
    #    sed '/Swift/Id' |
    #    sed '/Block/Id' |
    #    sed '$ a # NIC Configs for our roles\n  OS::TripleO::Compute::Net::SoftwareConfig: ../nic-configs/compute.yaml\n  OS::TripleO::Controller::Net::SoftwareConfig: ../nic-configs/controller.yaml\n  OS::TripleO::CephStorage::Net::SoftwareConfig: ../nic-configs/ceph-storage.yaml'
    #    > ~/my_templates/environments/network-custom.yaml
    - name: create custom install configuration
      template: src=custom-install.yaml.j2 dest=~/my_templates/environments/custom-install.yaml mode=0644
    - name: create first boot configuration
      template: src=firstboot-config.yaml.j2 dest=~/my_templates/firstboot-config.yaml mode=0644
    - name: copy nic configs
      template: src={{ item }}.j2 dest=~/my_templates/nic-configs/{{ item }} mode=0644
      with_items:
        - "compute.yaml"
        - "controller.yaml"
  #- shell: . ~/stackrc && openstack overcloud deploy --templates --control-scale 1 --compute-scale 1 --neutron-tunnel-types vxlan --neutron-network-type vxlan
  #  become: yes
  #  become_user: "{{ rhosp_stack_user }}"
    - name: deploy overcloud (even more coffee!)
      shell: >
        . ~/stackrc && openstack overcloud deploy
        --templates
        --control-flavor control
        --compute-flavor compute
        --control-scale 3
        --compute-scale 2
        --neutron-tunnel-types vxlan
        --neutron-network-type vxlan
        --ntp-server {{ hostvars[groups['layer1'][0]].ansible_host }}
        -e ~/my_templates/environments/custom-install.yaml
    #    -e ~/my_templates/environments/storage-environment.yaml
  when: instackenv_json.changed
  become: yes
  become_user: "{{ rhosp_stack_user }}"
