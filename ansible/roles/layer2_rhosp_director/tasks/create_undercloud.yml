- name: create undercloud.conf
  template: src=undercloud.conf.j2 dest=~/undercloud.conf mode=0644
  become: yes
  become_user: "{{ rhosp_stack_user }}"
  register: undercloud_conf
- name: install undercloud (you can grab a coffee now, this takes a while)
  command: openstack undercloud install
  become: yes
  become_user: "{{ rhosp_stack_user }}"
  when: undercloud_conf.changed

- name: ensure that provisioning network route has default route configured
  lineinfile: dest=/etc/sysconfig/network-scripts/ifcfg-br-ctlplane line="GATEWAY=\"{{ infrastructure_network_rhosp_provisioning.default_gw_host_prefix|ipaddr('address') }}\""
  register: ifcfg_br_ctlplane
# restarting the network is not enough as it causes the host to lose some IP adresses
# - name: restart network
#   service: state=restarted name=network
#   when: ifcfg_br_ctlplane|changed
- name: restart machine
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: ifcfg_br_ctlplane|changed
- name: waiting for server to come back
  wait_for: host={{ ansible_host }} port=22 delay=30 timeout=600
  become: false
  when: ifcfg_br_ctlplane|changed
  delegate_to: "{{ infrastructure_delegate_host_used_to_test_if_layer2_host_is_available }}"


# tweak timeouts
- block:
    - name: read nova_rpc_response_timeout
      command: crudini --get /etc/nova/nova.conf DEFAULT rpc_response_timeout
      register: nova_rpc_response_timeout
      changed_when: False
    - name: read ironic_rpc_response_timeout
      command: crudini --get /etc/ironic/ironic.conf DEFAULT rpc_response_timeout
      register: ironic_rpc_response_timeout
      changed_when: False
    - name: adapt nova_rpc_response_timeout
      command: crudini --set /etc/nova/nova.conf DEFAULT rpc_response_timeout {{ nova_rpc_timeout }}
      when: nova_rpc_response_timeout.stdout | int != nova_rpc_timeout
    - name: adapt ironic_rpc_response_timeout
      command: crudini --set /etc/ironic/ironic.conf DEFAULT rpc_response_timeout {{ ironic_rpc_timeout }}
      when: ironic_rpc_response_timeout.stdout | int != ironic_rpc_timeout
    - name: restart nova
      command: openstack-service restart nova
      when: nova_rpc_response_timeout.stdout | int != nova_rpc_timeout
    - name: restart ironic
      command: openstack-service restart ironic
      when: ironic_rpc_response_timeout.stdout | int != ironic_rpc_timeout
  when: current_lifecycle_env.openstack_version < 10


# install bootif fix - see https://bugzilla.redhat.com/show_bug.cgi?id=1234601
- name: create bootif-fix command
  copy: src=../templates/bootif-fix dest=/usr/bin/bootif-fix mode=0755
- name: create bootif-fix service
  copy: src=../templates/bootif-fix.service dest=/usr/lib/systemd/system/bootif-fix.service mode=0644
- name: (re)start bootif-fix
  service: name=bootif-fix state=restarted
- name: enable bootif-fix
  service: name=bootif-fix enabled=yes

#configure DNS for provisioning Network
- name: determine network UUID
  shell: . ~/stackrc && neutron subnet-list -f csv -F id --quote none | grep -v id
  changed_when: false
  register: neutron_uuid
  become: yes
  become_user: "{{ rhosp_stack_user }}"
- name: configure DNS for provisioning network
  shell: . ~/stackrc && neutron subnet-update "{{ neutron_uuid.stdout }}" --dns-nameserver {{ infrastructure_address_default_dns }}
  become: yes
  become_user: "{{ rhosp_stack_user }}"
  when: neutron_uuid.stdout_lines|length == 1
