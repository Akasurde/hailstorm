# --- Create necessary projects demo-dev and demo-prod for user developer:
- name: check existing projectsX
  shell: oc get projects | awk '{ print $1 }'
  register: projects
  changed_when: false

- name: Create demo-dev project
  shell: "oadm new-project demo-dev --admin='developer' --description='ticket monster developers stage'"
  when: mode=="create" and 'demo-dev' not in projects.stdout_lines

- name: Reseting demo-dev project to empty state
  shell: oc delete all --all -n demo-dev
  when: "'demo-dev' in projects.stdout_lines"

- name: Create demo-prod project
  shell: "oadm new-project demo-prod --admin='developer' --description='ticket monster production stage'"
  when: mode=="create" and 'demo-prod' not in projects.stdout_lines

- name: Reseting demo-prod project to empty state
  shell: oc delete all --all -n demo-prod
  when: "'demo-prod' in projects.stdout_lines"

# --- Create Templates monster and monster-prod in namespace openshift:
- name: check existing templates
  shell: oc get templates -n openshift | awk '{ print $1 }'
  register: templates
  changed_when: false

- block:
  - name: Prepare Monster Dev Template
    template: src=monster_template_dev.yml.j2 dest=/tmp/monster_template_dev.yml

  - name: Create monster dev template in openshift namespace
    shell: "oc create -f /tmp/monster_template_dev.yml -n openshift"
  when: "'monster-dev' not in templates.stdout_lines"

- block:
# Do one sample deployment to ensure docker images and maven dependencies
# are downloaded:
  - name: Doing sample deployment of monster-dev app
    shell: "oc new-app --template monster-dev -n demo-dev --labels=MonsterDevInitialDeploymentTest=true"

  - name: Wait for monster dev to become online
    shell: curl "http://monster-demo-dev.apps.{{ hailstorm_dns_domain }}/"
    register: tstcurl
    changed_when: false
    until: "'<title>Ticket Monster</title>' in tstcurl.stdout"
    retries: 480
    delay: 1

  - name: Removing sample deployment of monster-dev app
    shell: "oc delete all -l MonsterDevInitialDeploymentTest -n demo-dev"
  when: mode=="reset" or 'monster-dev' not in templates.stdout_lines

- block:
  - name: Prepare Monster Prod Template
    template: src=monster_template_prod.yml.j2 dest=/tmp/monster_template_prod.yml

  - name: Create monster prd template in openshift namespace
    shell: "oc create -f /tmp/monster_template_prod.yml -n openshift"

  - name: Grant Access to Images from demo-dev
    shell: "oc policy add-role-to-group system:image-puller system:serviceaccounts:demo-prod -n demo-dev"
  when: "'monster-prod' not in templates.stdout_lines"


# Create git  hook for ose3-ticket-monster inside git pod:
- block:
  - name: get git pod id
    shell: oc get pods -n devops-tools | grep git | awk '{ print $1 }'
    register: gitPod
    changed_when: false

  - file: path=/tmp/hooks state=directory

  - template: src=post-receive.j2 dest=/tmp/hooks/post-receive mode=a+x

  - name: Create git hook for monster
    shell: oc rsync /tmp/hooks/ {{ gitPod.stdout }}:/var/lib/git/ose3-ticket-monster.git/hooks  -n devops-tools --strategy=tar
  when: mode=="create"

# Create BuildPipeline in devops-tools to promote monster from demo-dev to demo-prod
- name: Grant devops-Jenkins access to demo-dev
  shell: oc policy add-role-to-user edit system:serviceaccount:devops-tools:jenkins -n demo-dev
- name: Grant devops-Jenkins access to demo-prod
  shell: oc policy add-role-to-user edit system:serviceaccount:devops-tools:jenkins -n demo-prod
- name: Prepare pipeline yaml
  template: src=monster_pipeline_devops.yml.j2 dest=/tmp/monster_pipeline_devops.yml
- name: Delete monster pipeline in devops project
  shell: "oc delete buildconfig demo-monster-pipeline -n devops-tools"
  ignore_errors: true
- name: Create monster pipeline in devops project
  shell: "oc create -f /tmp/monster_pipeline_devops.yml -n devops-tools"
