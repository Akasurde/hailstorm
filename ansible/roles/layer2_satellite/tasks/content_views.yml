- name: get current content views
  shell: hammer content-view list --organization "{{ organization }}" --nondefault yes | awk '{print $3}'
  register: current_content_views
  changed_when: false

- name: create content view
  command: 'hammer content-view create --organization "{{ organization }}" --name "{{ item.content_view }}"'
  when: item.content_view not in current_content_views.stdout_lines
  with_items: "{{ content_config }}"

# - name: define content view filter
#   command: hammer content-view filter rule create --organization "{{ organization }}" --name "{{ item.content_view }}"'
#   when: item.content_view not in current_content_views.stdout_lines and item.filter is defined
#   with_items: "{{ content_config }}"

- name: add repos to content_view
  command: 'hammer content-view add-repository --organization "{{ organization }}" --name "{{ item.0.content_view }}" --product "{{ item.1.product }}" --repository "{{ item.1.repository }}"'
  when: (republish is defined and republish) or item.0.content_view not in current_content_views.stdout_lines
  with_subelements:
    - "{{ content_config }}"
    - content

- name: check existing filters
  command: hammer --output json content-view filter list --content-view "{{ item.content_view }}" --organization "{{ organization }}"
  register: existing_filters
  when: item.filter is defined
  with_items: "{{ content_config }}"
  changed_when: false

- name: create filters
  command: hammer content-view filter create --content-view {{ item.0.item.content_view }} --name "{{ item.1.name }}" --description "{{ item.1.description }}" --inclusion "{{ item.1.include }}" --organization "{{ organization }}" --type {{ item.1.type }} --repositories "{{ item.1.apply_to|join('\",\"') }}"
  when: not item.0|skipped and item.1.name not in (item.0.stdout | from_json | map(attribute='Name') | list)
  with_subelements:
    - "{{ existing_filters.results }}"
    - item.filter
  register: new_filters

# - debug: msg="{{ lookup('template','missing_filters.json.j2') }}"
# - local_action: template src=missing_filters.json.j2 dest=/tmp/text2.txt

- name: create filter rules
  command: hammer content-view filter rule create {% if item.name is defined %}--name "{{ item.name }}"{% endif %} {% if item.errata_ids is defined %}--errata-ids "{{ item.errata_ids|join(',') }}"{% endif %} --content-view  {{ item.content_view }} --organization "{{ organization }}" --content-view-filter "{{ item.filtername }}"
  with_items: "{{ lookup('template','missing_filters.json.j2')  }}"

# - name: get current lifecycle environments
#   shell: hammer lifecycle-environment list --organization "{{ organization }}" --library false | awk '{ print $3 }' | tail -n+4
#   register: current_lifecycle_environments
#   changed_when: false
#
# - name: publish content_view
#   command: 'hammer content-view publish --organization "{{ organization }}" --name "{{ item.content_view }}"'
#   when: (republish is defined and republish) or item.content_view not in current_content_views.stdout_lines
#   with_items: "{{ content_config }}"
#
# - name: get latest version id of content_view
#   shell: hammer content-view version list --organization "{{ organization }}" --content-view "{{ item.content_view }}" | grep Library
#   register: cv_id
#   changed_when: false
#   with_items: "{{ content_config }}"
#
# - name: promote latest version of content_view to all lifecycle environments
#   command: hammer content-view version promote --id '{{ item.1.stdout.split(' ')[0] }}' --organization "{{ organization }}" --to-lifecycle-environment '{{ item.0.name }}'
#   when: (republish is defined and republish) or item.0.name not in item.1.stdout
#   with_nested:
#     - "{{ lifecycle_environments }}"
#     - "{{ cv_id.results }}"
